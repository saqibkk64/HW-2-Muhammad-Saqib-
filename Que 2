#include <iostream>
#include <vector>

class Vector {
private:
    std::vector<double> elements;

public:
    // Constructors
    Vector() = default;
    Vector(const std::vector<double>& values) : elements(values) {}

    // Getter and Setter
    const std::vector<double>& getElements() const {
        return elements;
    }

    void setElements(const std::vector<double>& values) {
        elements = values;
    }

    // Compound Assignment and Arithmetic Operators
    Vector& operator+=(const Vector& other) {
        for (size_t i = 0; i < elements.size(); ++i) {
            elements[i] += other.elements[i];
        }
        return *this;
    }

    Vector& operator-=(const Vector& other) {
        for (size_t i = 0; i < elements.size(); ++i) {
            elements[i] -= other.elements[i];
        }
        return *this;
    }

    // Scalar Multiplication
    Vector operator*(double scalar) const {
        Vector result(*this);
        for (double& element : result.elements) {
            element *= scalar;
        }
        return result;
    }

    // Scalar Product for Vector * Vector
    double operator*(const Vector& other) const {
        double result = 0.0;
        for (size_t i = 0; i < elements.size(); ++i) {
            result += elements[i] * other.elements[i];
        }
        return result;
    }

    // Input and Output Operators
    friend std::ostream& operator<<(std::ostream& os, const Vector& vec) {
        os << "[";
        for (size_t i = 0; i < vec.elements.size(); ++i) {
            os << vec.elements[i];
            if (i < vec.elements.size() - 1) {
                os << ", ";
            }
        }
        os << "]";
        return os;
    }

    friend std::istream& operator>>(std::istream& is, Vector& vec) {
        for (double& element : vec.elements) {
            is >> element;
        }
        return is;
    }

    // Assignment Operator
    Vector& operator=(const Vector& other) {
        if (this != &other) {
            elements = other.elements;
        }
        return *this;
    }
};

int main() {
    // Example usage
    Vector v1({1.0, 2.0, 3.0});
    Vector v2({4.0, 5.0, 6.0});

    // Compound assignment
    v1 += v2;
    std::cout << "v1 after v1 += v2: " << v1 << std::endl;

    // Scalar multiplication
    Vector v3 = v2 * 2.0;
    std::cout << "v3 = v2 * 2.0: " << v3 << std::endl;

    // Scalar product
    double dotProduct = v1 * v2;
    std::cout << "Dot product of v1 and v2: " << dotProduct << std::endl;

    return 0;
}
